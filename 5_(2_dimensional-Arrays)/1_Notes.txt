// ===============================================================
// ðŸ“˜ 2-D ARRAYS IN C++ (From Basics to Advanced)
// ===============================================================

#include <iostream>
using namespace std;

int main() {

// ---------------------------------------------------------------
// 1. BASICS OF 2-D ARRAYS
// ---------------------------------------------------------------
// A 2D array is an array of arrays. It stores data in rows & columns.
//
// Syntax:
// dataType arrayName[rows][cols];
//
// Example:
// int arr[3][4];   // 3 rows, 4 columns

    int arr[3][4] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12}
    };

    cout << "Basic Access Example: " << arr[1][2] << endl; // row 1, col 2 â†’ 7


// ---------------------------------------------------------------
// 2. INPUT & OUTPUT IN 2-D ARRAYS
// ---------------------------------------------------------------

    int n=2, m=3;
    int matrix[2][3];

    cout << "Enter elements of 2x3 matrix: " << endl;
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Matrix is:" << endl;
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }


// ---------------------------------------------------------------
// 3. COMMON OPERATIONS
// ---------------------------------------------------------------

// âœ… Row-wise Sum
    int rowSum = 0;
    for(int j=0; j<m; j++) rowSum += matrix[0][j];
    cout << "Sum of 1st row: " << rowSum << endl;

// âœ… Column-wise Sum
    int colSum = 0;
    for(int i=0; i<n; i++) colSum += matrix[i][1]; // 2nd column
    cout << "Sum of 2nd column: " << colSum << endl;

// âœ… Transpose of Matrix
    cout << "Transpose: " << endl;
    for(int j=0; j<m; j++) {
        for(int i=0; i<n; i++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }


// ---------------------------------------------------------------
// 4. POINTERS & 2-D ARRAYS
// ---------------------------------------------------------------
// A 2D array is stored in contiguous memory.
// arr[i][j] = *(*(arr + i) + j)

    cout << "Address of arr[0][0]: " << &arr[0][0] << endl;
    cout << "Address of arr[0][1]: " << &arr[0][1] << endl;


// ---------------------------------------------------------------
// 5. DYNAMIC 2-D ARRAYS (Using Pointers)
// ---------------------------------------------------------------

    int rows = 3, cols = 3;

    int** dynArr = new int*[rows];
    for(int i=0; i<rows; i++) {
        dynArr[i] = new int[cols];
    }

    // Fill dynamic array
    int val = 1;
    for(int i=0; i<rows; i++) {
        for(int j=0; j<cols; j++) {
            dynArr[i][j] = val++;
        }
    }

    cout << "Dynamic 2D Array:" << endl;
    for(int i=0; i<rows; i++) {
        for(int j=0; j<cols; j++) {
            cout << dynArr[i][j] << " ";
        }
        cout << endl;
    }

    // Free memory
    for(int i=0; i<rows; i++) {
        delete[] dynArr[i];
    }
    delete[] dynArr;


// ---------------------------------------------------------------
// 6. ADVANCED OPERATIONS
// ---------------------------------------------------------------

// âœ… Searching in 2D Array (Linear Search)
    int key = 7;
    bool found = false;
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            if(matrix[i][j] == key) {
                found = true;
                cout << "Found " << key << " at (" << i << "," << j << ")" << endl;
            }
        }
    }
    if(!found) cout << key << " not found!" << endl;


// âœ… Spiral Traversal
    cout << "Spiral Traversal:" << endl;
    int top=0, bottom=n-1, left=0, right=m-1;
    while(top<=bottom && left<=right) {
        for(int j=left; j<=right; j++) cout << matrix[top][j] << " ";
        top++;
        for(int i=top; i<=bottom; i++) cout << matrix[i][right] << " ";
        right--;
        if(top<=bottom) {
            for(int j=right; j>=left; j--) cout << matrix[bottom][j] << " ";
            bottom--;
        }
        if(left<=right) {
            for(int i=bottom; i>=top; i--) cout << matrix[i][left] << " ";
            left++;
        }
    }
    cout << endl;


// âœ… Matrix Multiplication
    int A[2][2] = {{1,2},{3,4}};
    int B[2][2] = {{5,6},{7,8}};
    int C[2][2] = {0};

    for(int i=0; i<2; i++) {
        for(int j=0; j<2; j++) {
            for(int k=0; k<2; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    cout << "Matrix Multiplication Result:" << endl;
    for(int i=0; i<2; i++) {
        for(int j=0; j<2; j++) {
            cout << C[i][j] << " ";
        }
        cout << endl;
    }


// ---------------------------------------------------------------
// END OF NOTES
// ---------------------------------------------------------------
    return 0;
}
